#version=RHEL7
# System authorization information
auth --enableshadow --passalgo=sha512

# Use CDROM installation media
cdrom

# Use graphical install
#graphical
text

# Run the Setup Agent on first boot
firstboot --enable
#ignoredisk --only-use=sda
# Keyboard layouts
keyboard --vckeymap=cn --xlayouts='cn'
# System language
lang zh_CN.UTF-8

# Network information
network  --bootproto=static --onboot=yes --device=eno1x --gateway=192.168.0.1 --ip=192.168.0.2 --nameserver=114.114.114.114 --netmask=255.255.255.0 --noipv6 --activate
#network  --bootproto=dhcp --device=eno2 --onboot=off --ipv6=auto
network  --hostname=controller1
# Root password
#rootpw --iscrypted $6$PphGKv3xyCcB5jCh$Lb5ToP1uAWJMpF8C8HMHql9YAp15JzySlLBPgYoQ5AvVfPwa419lXDMcKX0wJFTYieeB2TC7A7IQCUAUSw1nr.
rootpw --plaintext 123qwe

# System timezone
timezone Asia/Shanghai --isUtc

# Clear the Master Boot Record
zerombr

# Include partition scheme
%include /tmp/partitioning.txt


#---------<<<安装条件:安装u盘不能大于60G<<<------------#
#--------->update_time:2018-05-15:
#--------->目前安装框架：1SSD+1HDD  
#--------->SSD大于120G
#------------------------------------------------------#

%pre
#!/bin/bash

#----------<<<获取所有的磁盘&磁盘总数<<<---------#
COUNT=0
for DISK in $(awk '{if ($NF ~ "^(s|h)d|cciss" && $NF !~ "((s|h)d|c.d.)[a-z][0-9]$") print $4}' /proc/partitions); do
    DEVS[${COUNT}]="${DISK}"
    DISKS[${COUNT}]="/dev/${DISK}"
    #echo "${DISK},${DEVS[${COUNT}]}, ${DISKS[${COUNT}]}"
    let COUNT++
done

#---------<<<#获取系统盘符(条件)：排除小于60G盘，剩余盘符中容量最小的一个盘符<<<----#
MIN_CAP=0
MIN_CAP_DEV=""
EXCLUDE_U_DISK_COUNT=0
for((i=0;i<${COUNT};i++));
do
	CURRENT_CAP=`parted -s ${DISKS[$i]} unit mb print free | grep "Disk /dev/" | awk '{print $3}' |cut -d "M" -f1`
	#echo "${CURRENT_CAP}MB"

	if [[ "${CURRENT_CAP}" -gt 61440 ]];then
		if [[ "${MIN_CAP}" -eq 0 ]];then
			MIN_CAP=${CURRENT_CAP}
			MIN_CAP_DEV=${DEVS[$i]}
		fi
		if [[ "${MIN_CAP}" -gt "${CURRENT_CAP}" ]];then
			MIN_CAP=${CURRENT_CAP}
			MIN_CAP_DEV=${DEVS[$i]}
		fi
		
		EXCLUDE_U_DISK_DEVLIST[${EXCLUDE_U_DISK_COUNT}]=${DEVS[$i]}
		let EXCLUDE_U_DISK_COUNT++
	fi
done

#-----------<<<打印信息<<<-----------#
if [[ "${MIN_CAP}" -gt 61440 ]];then
	echo "#exclude u disk , the number of ${EXCLUDE_U_DISK_COUNT} devices list: "  > /tmp/partitioning.txt
	if [ -f "/run/install/repo/disk.txt" ];then
		rm -f /run/install/repo/disk.txt
	fi
	if [ -f "/run/install/repo/os_disk.txt" ];then
		rm -f /run/install/repo/os_disk.txt
	fi
	if [ -f "/run/install/repo/devs.txt" ];then
		rm -f /run/install/repo/devs.txt
	fi
	
	for ((i=0;i<${EXCLUDE_U_DISK_COUNT};i++));
	do
		CURRENT_CAP=`parted -s ${EXCLUDE_U_DISK_DEVLIST[$i]} unit mb print free | grep "Disk /dev/" | awk '{print $3}' |cut -d "M" -f1`
		echo "#devices name: ${EXCLUDE_U_DISK_DEVLIST[$i]}, capacity is: ${CURRENT_CAP}" >>/run/install/repo/devs.txt
		echo "#${EXCLUDE_U_DISK_DEVLIST[$i]}" >>/tmp/partitioning.txt
		echo "${EXCLUDE_U_DISK_DEVLIST[$i]}" >>/run/install/repo/disk.txt
	done
	
	echo "${MIN_CAP_DEV}" >> /run/install/repo/os_disk.txt
else 
	echo "#install system disk < 60G, warning: system required disk > 60G!!!"  > /tmp/partitioning.txt
fi


#echo "$MIN_CAP, ${MIN_CAP_DEV}"
#数组元素列表
#echo "${DISKS[1]}, ${DISKS[0]},${DISKS[2]},$COUNT"
#数组总长度
#echo "${#DISKS[*]}"


# Calculate the SWAP size over the amount of RAM
MEM=$(($(sed -n 's/^MemTotal: \+\([0-9]*\) kB/\1/p' /proc/meminfo) / 1024))
if [ "${MEM}" -lt "2048" ]; then
    SWAP=$((MEM * 2))
elif [ "${MEM}" -le "8192" ]; then
    SWAP=${MEM}
elif [ "${MEM}" -ge "8192" ]; then
    SWAP=16384  #16G
fi

EFI_CAP=200
BOOT_CAP=1024
VAR_CAP=30720
ROOT_CAP=20480
SWAP_CAP=${SWAP}
SYSBACKUP_CAP=512
let TOTAL_CAP=${BOOT_CAP}+${VAR_CAP}+${ROOT_CAP}+${SWAP_CAP}+${SYSBACKUP_CAP}

#--------------------->>>除u盘之外的磁盘,全部清除<<<----------------#
DISKS=${EXCLUDE_U_DISK_DEVLIST[@]:0}
#echo "bootloader --append=\" crashkernel=auto net.ifnames=0\" --location=mbr --boot-drive=${MIN_CAP_DEV}"  >> /tmp/partitioning.txt
echo "bootloader --append=\" crashkernel=auto\" --location=mbr --boot-drive=${MIN_CAP_DEV}"  >> /tmp/partitioning.txt
echo "ignoredisk --only-use=${DISKS// /,}"                  >> /tmp/partitioning.txt
echo "clearpart --all --initlabel --drives=${DISKS// /,}"  >> /tmp/partitioning.txt

#---<<<对efi与BIOS安装方式的区别<<<---#
if [ -d "/sys/firmware/efi" ];then
	echo "part /boot/efi --fstype=\"efi\" --ondisk=${MIN_CAP_DEV} --size=${EFI_CAP} --fsoptions=\"umask=0077,shortname=winnt\"" >> /tmp/partitioning.txt
else
	echo "part biosboot --fstype=\"biosboot\" --ondisk=${MIN_CAP_DEV} --size=1"  >> /tmp/partitioning.txt
fi
echo "part /boot --fstype=\"xfs\"   --size=${BOOT_CAP}" >> /tmp/partitioning.txt
echo "part pv.00 --fstype=\"lvmpv\" --ondisk=${MIN_CAP_DEV} --size=${TOTAL_CAP}" >> /tmp/partitioning.txt

# Define the volume group and logical volumes
cat >> /tmp/partitioning.txt <<EOF
volgroup VG00 pv.00
logvol swap --fstype="swap" --size=${SWAP_CAP} --name=swap --vgname=VG00
logvol /    --fstype="xfs"  --size=${ROOT_CAP} --name=root --vgname=VG00
logvol /sysbackup --fstype="xfs"  --size=${SYSBACKUP_CAP} --name=sysbackup --vgname=VG00
logvol /var --fstype="xfs"  --size=${VAR_CAP} --name=var --vgname=VG00
EOF
%end

%packages
@^infrastructure-server-environment 
@base
@core
chrony
kexec-tools
%end

%addon com_redhat_kdump --enable --reserve-mb='auto'
%end



%post  --log=/root/ks-post.log
echo "post script" 

mount LABEL="Custom" /mnt/   #挂载安装u盘,制作iso时指定"Custom"
cp /mnt/disk.txt  /root/
cp /mnt/os_disk.txt  /root/


#---------->>>磁盘分区格式化<<<-----------------#

############################--->start<----########################################
#概述:  
#	目前只针对allinone系统,系统一般提供4块盘。
#	<1>.系统提供阵列卡,用户先做整列,安装时就只能看到一块盘.
#	<2>.系统不提供阵列卡,将所有的盘都做lvm。
#	具体分区策略: 
#		<1>/sysbackup/sysbk  /dev/mapper/VGBK00-LVMBK00  -->系统备份50G,不放在系统盘
#		<2>/data   /dev/mapper/VGDATA00-LVMDATA00   -->images+instances (glance+nova),通过系统cpu的能力计算vm个数。
#		<3>vgname: cinder-volumes   -->云硬盘,所有剩余空间。
#	注：安装u盘需要小于60G。
#
#   2018-05-15日期修改：
#		1.后期使用都为1SSD+1HDD.  必须要有一块SSD && SSD > 120G  
#		2. SSD--->系统盘、实例缓存盘、云硬盘的缓存盘。
#		   hdd--->instances+images分区、云硬盘分区。
#		3.如果提供多块HDD,只选用其中一块盘。
#		4.如果只提供一块SSD系统盘? -暂时不考虑。
			

#----->确定HDD磁盘总容量<-----#
MAX_CAP=0
MAX_CAP_DEV=""

DISK_NUM=`cat /root/disk.txt | wc -l`
if [[ "${DISK_NUM}" -ge 2 ]];then
	
	OS_DISK=`cat /root/os_disk.txt`
	while read line
	do
		if [ "${line}" != "${OS_DISK}" ];then
				echo "${line}"
				CURRENT_CAP=`parted -s  /dev/${line} unit mb print free | grep "Disk /dev/" | awk '{print $3}' |cut -d "M" -f1`
				
				if [[ "${MAX_CAP}" -eq 0 ]];then
					MAX_CAP=${CURRENT_CAP}
					MAX_CAP_DEV=${line}
				fi
				
				if [[ "${MAX_CAP}" -lt  "${CURRENT_CAP}" ]];then
					MAX_CAP=${CURRENT_CAP}
					MAX_CAP_DEV=${line}
				fi
		fi
	done < /root/disk.txt 
	echo ${MAX_CAP_DEV} >> /root/data_disk.txt
	
	#-------------------->检查最大容量的HDD的分区表配置为gpt<------------------------------------#
	echo "parted_disk function----->check devices /dev/${MAX_CAP_DEV} partition label: is gpt?."
	partition_label=`parted -s /dev/${MAX_CAP_DEV} unit mb print free | grep "Partition Table"| cut -d ":" -f2`
	if [ "${partition_label}" != " gpt" ];then   #注意gpt前面有一个空格。
		parted -s /dev/${MAX_CAP_DEV} mklabel gpt
		partition_label=`parted -s /dev/${MAX_CAP_DEV} unit mb print free | grep "Partition Table"| cut -d ":" -f2`
		if [ "${partition_label}" == " gpt" ];then
			echo "change /dev/${MAX_CAP_DEV} partition_label to gpt is ok"
		else	
			echo "change /dev/${MAX_CAP_DEV} partition_label to gpt is not ok"
		fi
	else
		echo "/dev/${MAX_CAP_DEV} is gpt partition_label. no change."
	fi
	
	echo "the disk of hdd device: ${MAX_CAP_DEV}, the disk of hdd capacity: ${MAX_CAP}"
	
fi
	
#---->通过虚拟机个数确定云硬盘容量<----#
#核心数GHZ*主频*1.2*0.8/2GHZ  注: 1.2为超线程后的提升系数
#例子1：
#	Intel(R) Xeon(R) CPU E5-2690 v4 @ 2.60GHz  *2
#	56*2.6*1.2*0.8/4 =34  
#例子2：
#	Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz  *2
#	40*2.2*1.2*0.8/4 = 21


#------>2018-05-15:
#------>通过cpu的GHZ数、内存、磁盘计算实例、云硬盘容量<---------------#
#=======>基于内存计算虚拟机的个数,2G内存为一个VM。
TOTAL_MEM=`free -m| sed -n '2p' | awk '{print $2}'`
BASE_ON_MEM_THE_NUM_OF_VM=$(echo "${TOTAL_MEM}/2/1024"|bc)
echo "The number of VM based on memory: ${BASE_ON_MEM_THE_NUM_OF_VM}"

#=======>基于cpu的能力计算虚拟机的个数
NUM_OF_CPU=`cat /proc/cpuinfo  | grep processor | wc -l`
FREQ_OF_CPU=`cat /proc/cpuinfo  | grep "model name" | tail -1 | awk '{print $NF}'| cut -d  "G" -f1`
#model name      : Intel(R) Core(TM) i7-3770 CPU @ 3.40GHz
#model name      : Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz
echo "the number of cpu: ${NUM_OF_CPU}, cpu frequency: ${FREQ_OF_CPU}"
NUM_OF_VM=$(echo "${NUM_OF_CPU}*${FREQ_OF_CPU}*1.2*0.8/4"|bc)

#=======>基于cpu的能力计算虚拟机的个数
if [[ ${NUM_OF_VM} -gt ${BASE_ON_MEM_THE_NUM_OF_VM} ]];then
	NUM_OF_VM=${BASE_ON_MEM_THE_NUM_OF_VM}
fi
echo "the number of vm: ${NUM_OF_VM}"


#确定云硬盘使用大小
VM_OS_CAP=$(echo "${NUM_OF_VM}*50*1024"|bc)
let VM_OS_CAP=${VM_OS_CAP}+102400 #100G*1024  100预留给vm模板镜像
echo " the capacity of VM_OS: ${VM_OS_CAP}"



function parted_disk()
{
	#$1--->指定盘符
	#$2--->指定分区大小
	#$3--->指定vg名称
	echo "parted_disk function----->para:$1,$2"
	
	TOTAL_CAP=`parted -s /dev/$1 unit mb print free | grep "Disk /dev/" | awk '{print $3}' |cut -d "M" -f1`
	FREE_CAP=`parted -s /dev/$1 unit mb print free | grep Free | awk '{print $3}' | cut -d "M" -f1|awk 'END {print}'`
	
	if [[ ${FREE_CAP} -le 10 ]];then
		echo "parted_disk function----->free capacity less than 10MB"
		return 
	fi
	
	#最开始的1MB多空间
	let FREE_CAP=${FREE_CAP}-2
	
	if [ "${FREE_CAP}" -lt "$2" ];then
		echo "parted_disk function-----> free capacity less than $2"
	fi
	
	let START_CAP=${TOTAL_CAP}-${FREE_CAP}
	let END_CAP=${START_CAP}+$2  #50G=50*1024MB
	if [[ ${END_CAP} -gt ${TOTAL_CAP} ]];then
		END_CAP=${TOTAL_CAP}
	fi 
	
	parted -s --align optimal /dev/$1 mkpart primary ${START_CAP}  ${END_CAP}	
	partprobe /dev/$1
	
}


#在系统盘中配置缓存分区(目前两个缓存分区一样大,可以优化)
OS_DISK=`cat /root/os_disk.txt`

FREE_CAP=`parted -s /dev/${OS_DISK} unit mb print free | grep Free | awk '{print $3}' | cut -d "M" -f1|awk 'END {print}'`
SIZE_CAP=$(echo "${FREE_CAP}/2"|bc)
parted_disk ${OS_DISK} ${SIZE_CAP} 
num=`ls -l /sys/block/${OS_DISK}/ | grep ${OS_DISK} | wc -l`  
BCACHE_ONE_DEV=/dev/${OS_DISK}${num}


FREE_CAP=`parted -s /dev/${OS_DISK} unit mb print free | grep Free | awk '{print $3}' | cut -d "M" -f1|awk 'END {print}'`
parted_disk ${OS_DISK}  ${FREE_CAP}
num=`ls -l /sys/block/${OS_DISK}/ | grep ${OS_DISK} | wc -l`  
BCACHE_TWO_DEV=/dev/${OS_DISK}${num}


#在数据盘中配置：系统备份、数据盘、云硬盘。
DATA_DISK=`cat /root/data_disk.txt`

parted_disk ${DATA_DISK} 51200
num=`ls -l /sys/block/${DATA_DISK}/ | grep ${DATA_DISK} | wc -l`  
mkfs.xfs /dev/${DATA_DISK}${num}
UUID=`blkid | grep ${DATA_DISK}${num} | awk '{print $2}'`
mkdir -p /sysbackup/sysbk
echo "${UUID} /sysbackup/sysbk  xfs     defaults   0 0" >>/etc/fstab


parted_disk ${DATA_DISK} ${VM_OS_CAP}
num=`ls -l /sys/block/${DATA_DISK}/ | grep ${DATA_DISK} | wc -l`  
BACK_END_ONE_DEV=/dev/${DATA_DISK}${num}


FREE_CAP=`parted -s /dev/${DATA_DISK} unit mb print free | grep Free | awk '{print $3}' | cut -d "M" -f1|awk 'END {print}'`
parted_disk ${DATA_DISK} ${FREE_CAP}
num=`ls -l /sys/block/${DATA_DISK}/ | grep ${DATA_DISK} | wc -l`  
BACK_END_TWO_DEV=/dev/${DATA_DISK}${num}

echo "bcache0,${BCACHE_ONE_DEV},${BACK_END_ONE_DEV};bcache1,${BCACHE_TWO_DEV},${BACK_END_TWO_DEV};" >> /root/bcache.txt

############################--->end<----########################################



#---------->>>拷贝openstack执行脚本<<<-------------#
#tar zcvf pike_install.tar.gz  pike  #压缩filename.tar.gz
cp /mnt/pike_install.tar.gz /root/
cd /root/
tar -xf  pike_install.tar.gz 
cp /mnt/1_to_pike.sh /root/pike/
chmod +x /root/pike/1_to_pike.sh
#cp /mnt/backup/*  /sysbackup/
if [ -f "/mnt/ip.txt" ];then
	cp /mnt/ip.txt  /root/
fi


#--------->>>制作本地源<<<--------------#
mkdir -p /yum
cp -r /mnt/centos7_rpm/ /yum
cp -r /mnt/pike_web_cloudteaching_install /root/
cp -r /mnt/rpm_update  /root/



mkdir -p /root/yum.bak
mv /etc/yum.repos.d/*.repo /root/yum.bak

cat >> /etc/yum.repos.d/CentOS-Local.repo <<EOF
[Local]
name = this-sprocomm-repo
baseurl = file:///yum/centos7_rpm
gpgcheck=0
enabled=1
cost=88
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
EOF

#如果/yum/centos7_rpm中有新添加的包时,需要使用createrepo更新相关信息
yum clean all && yum makecache
yum install -y createrepo 
createrepo /yum/centos7_rpm
yum clean all && yum makecache

yum install -y python-openstackclient openstack-selinux python2-PyMySQL openstack-utils
yum install -y git  python-pip


#针对系统只有一张网卡的情况，合并管理网与vm上外网网卡；
#	物理网卡使用OVSPort结构类型。添加br-provider网桥；
#	操作依赖于openvswitch
yum install -y  openstack-neutron-openvswitch  
yum update -y 


#------->>>关闭防火墙<<<-------------------------------#
[[ -f /usr/bin/expect ]] || { echo "install expect";yum install expect -y; } 

#关闭selinux、防火墙
systemctl stop firewalld.service
systemctl disable firewalld.service
firewall-cmd --state
sed -i '/^SELINUX=.*/c SELINUX=disabled' /etc/selinux/config
sed -i 's/^SELINUXTYPE=.*/SELINUXTYPE=disabled/g' /etc/selinux/config
grep --color=auto '^SELINUX' /etc/selinux/config
setenforce 0


#------>>>配置IP地址<<<<--------------------------------#
#--->update:2018-06-12<---------------------------------#
#--->author :you <--------------------------------------#
#--->/udisk/LiveOS/squashfs.img: <----------------------#
#---->   修改文件usr/sbin/anaconda<---------------------#
#---->   输出结果在/run/install/repo/ip.txt<------------#   
#---->   192.168.3.220/24<------------------------------#
function cdr2mask ()
{
   # Number of args to shift, 255..255, first non-255 byte, zeroes
   set -- $(( 5 - ($1 / 8) )) 255 255 255 255 $(( (255 << (8 - ($1 % 8))) & 255 )) 0 0 0
   [ $1 -gt 1 ] && shift $1 || shift
   echo ${1-0}.${2-0}.${3-0}.${4-0}
}

ADDR=`cat /root/ip.txt`  #192.168.3.220/24
NET_IP=`echo ${ADDR%%/*}`  #192.168.3.220
GATE_WAY=`echo ${NET_IP%.*}`.1  #192.168.3.1
NET_MASK=`echo ${ADDR##*/}`  #24
CDR_TO_MASK=`cdr2mask ${NET_MASK}` #255.255.255.0
echo "nic info: ip-> ${NET_IP}, mask-> ${CDR_TO_MASK}, gateway-> ${GATE_WAY}"

MANAGE_NIC_IPADDR=${NET_IP}
MANAGE_NIC_MASK=${CDR_TO_MASK}
MANAGE_NIC_GATEWAY=${GATE_WAY}
#MANAGE_NIC_IPADDR="192.168.3.220"
#MANAGE_NIC_MASK="255.255.255.0"
#MANAGE_NIC_GATEWAY="192.168.3.1"
echo "nic info: ip-> ${MANAGE_NIC_IPADDR}, mask-> ${MANAGE_NIC_MASK}, gateway-> ${MANAGE_NIC_GATEWAY}"

#记录管理网卡名称
MANAGE_NIC_NAME_TO_FILE="/root/manage_nic.txt"    
#记录 承载虚拟机网络网卡的名称
VM_NIC_NAME_TO_FILE="/root/vm_nic.txt"


function  config_one_nic()
{
NIC_NAME=`ls /sys/class/net/ | grep "^e[n|m]" | head -1`
echo "${NIC_NAME}" > ${MANAGE_NIC_NAME_TO_FILE}

cat >/etc/sysconfig/network-scripts/ifcfg-${NIC_NAME}<<EOF
TYPE=OVSPort
DEVICE=enp3s0
ONBOOT=yes
DEVICETYPE=ovs
OVS_BRIDGE=br-provider
EOF
sed -i "s/DEVICE=enp3s0/DEVICE=${NIC_NAME}/g"  /etc/sysconfig/network-scripts/ifcfg-${NIC_NAME}


cat >/etc/sysconfig/network-scripts/ifcfg-br-provider<<EOF
DEVICE=br-provider
DEVICETYPE=ovs
TYPE=OVSBridge
BOOTPROTO=static
IPADDR=192.168.3.12
NETMASK=255.255.255.0
GATEWAY=192.168.3.1
DNS1=192.168.3.12
DNS2=114.114.114.114
DEFROUTE=yes
EOF
sed -i "s/IPADDR=.*/IPADDR=${MANAGE_NIC_IPADDR}/g"     /etc/sysconfig/network-scripts/ifcfg-br-provider
sed -i "s/NETMASK=.*/NETMASK=${MANAGE_NIC_MASK}/g"     /etc/sysconfig/network-scripts/ifcfg-br-provider
sed -i "s/GATEWAY=.*/GATEWAY=${MANAGE_NIC_GATEWAY}/g"  /etc/sysconfig/network-scripts/ifcfg-br-provider

sed -i "s/DNS1=.*/DNS1=${MANAGE_NIC_IPADDR}/g"     /etc/sysconfig/network-scripts/ifcfg-br-provider
}


function fix_keepalive_conf()
{
	NIC_NAME=`ls /sys/class/net/ | grep "^e[n|m]" | head -1`
	if [ -f "/etc/keepalived/keepalived.conf" ];then
		sed -i "s/${NIC_NAME}/br-provider/g"  /etc/keepalived/keepalived.conf
	fi
}


function config_two_nic()
{
IF_NAME=`ls /sys/class/net/ | grep "^e[n|m]" | head -1`
echo "${IF_NAME}" > ${MANAGE_NIC_NAME_TO_FILE}

IFCFG_NAME=ifcfg-${IF_NAME}
IF_UUID=`cat /etc/sysconfig/network-scripts/${IFCFG_NAME} | grep UUID| cut -d "=" -f2`
mv /etc/sysconfig/network-scripts/${IFCFG_NAME} /root/${IFCFG_NAME}.bak

cat >> /etc/sysconfig/network-scripts/${IFCFG_NAME} <<EOF
UUID="107f2cbd-0b92-4f2e-b6fe-7f7dadbd1de3"
DNS2="114.114.114.114"
DNS1="192.168.3.220"
IPADDR="192.168.3.220"
GATEWAY="192.168.3.1"
NETMASK="255.255.255.0"
BOOTPROTO="static"
DEVICE="enp2s0"
ONBOOT="yes"
IPV6INIT="no"
EOF

sed -i "s/enp2s0/${IF_NAME}/g"                                  /etc/sysconfig/network-scripts/${IFCFG_NAME}
sed -i "s/107f2cbd-0b92-4f2e-b6fe-7f7dadbd1de3/${IF_UUID}/g"    /etc/sysconfig/network-scripts/${IFCFG_NAME}

sed -i "s/IPADDR=.*/IPADDR=${MANAGE_NIC_IPADDR}/g"     /etc/sysconfig/network-scripts/${IFCFG_NAME}
sed -i "s/NETMASK=.*/NETMASK=${MANAGE_NIC_MASK}/g"    /etc/sysconfig/network-scripts/${IFCFG_NAME}
sed -i "s/GATEWAY=.*/GATEWAY=${MANAGE_NIC_GATEWAY}/g"  /etc/sysconfig/network-scripts/${IFCFG_NAME}

sed -i "s/DNS1=.*/DNS1=${MANAGE_NIC_IPADDR}/g"    /etc/sysconfig/network-scripts/${IFCFG_NAME}

SECOND_IF_NAME=`ls /sys/class/net/ | grep "^e[n|m]"  | head -2 | awk 'END {print}'`
if [ "${SECOND_IF_NAME}" != "${IF_NAME}" ];then
	echo  "${SECOND_IF_NAME}"  > ${VM_NIC_NAME_TO_FILE}
fi
}

IF_NUM=`ls /sys/class/net/ | grep "^e[n|m]" | wc -l`
if [ ${IF_NUM} -lt 1 ];then   #没有网卡
	echo "The system have no nic interface！" >> /root/install.log
elif [ ${IF_NUM} -eq 1 ];then  #只有一张
	echo "system have only one nic interface！" >> /root/install.log
	config_one_nic   #管理网与vm上外网合并
	fix_keepalive_conf
else   #有一张以上网卡
	echo "system have  mange nic interface！" >> /root/install.log
	config_two_nic   #管理网使用第一张网卡,vm上外网使用第二张网卡
fi
#------>>>config_ip-end<<<<--------------------------------#



#------->>>添加DNS服务器-dashboard访问慢的问题<<<----------#
cd /mnt/
./install_bind.sh 
#------->>>DNS-end<<<--------------------------------------#



#-------------->>>开机安装openstack<<<<-------------#
echo "sleep 20 && cd /root/pike && ./1_to_pike.sh" >> /etc/rc.d/rc.local
chmod +x /etc/rc.d/rc.local


#------->>>更新内核<<<-------------------------------------#
cd /mnt/kernel4.7
rpm -ivh *.rpm
grub2-set-default "CentOS Linux (4.7.0-1.el7.elrepo.x86_64) 7 (Core)"
sed -i "s/GRUB_CMDLINE_LINUX=.*/GRUB_CMDLINE_LINUX=\"crashkernel=auto\ rd.lvm.lv=VG00\/root\ rd.lvm.lv=VG00\/swap\ rhgb\ quiet\ nomodeset\"/g" /etc/default/grub
grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg
#------->>>end-update-kernel<<<----------------------------#

cd /
umount /mnt

%end

reboot



